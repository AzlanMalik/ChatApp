version: 2.1

# ---------------------------------------------------------------------------- #
#                                     ORBS                                     #
# ---------------------------------------------------------------------------- #
orbs:
  aws-cli: circleci/aws-cli@4.1.3
  aws-ecr: circleci/aws-ecr@9.0.2
  aws-ecs: circleci/aws-ecs@4.0.0
  snyk: snyk/snyk@2.0.3
  terraform: circleci/terraform@3.2.1

# ---------------------------------------------------------------------------- #
#                                   WORKFLOW                                   #
# ---------------------------------------------------------------------------- #
workflows:
  chatapp-devsecops-pipeline:
    jobs:
      - sast_scan
      - build_scan_push_db_docker_image:
          requires:
           - sast_scan
      - build_scan_push_app_docker_image:
          requires:
           - sast_scan
      - dast_deployment:
          requires:
           - sast_scan
      - dast_testing:
          requires:
            - dast_deployment
            - build_scan_push_db_docker_image
            - build_scan_push_app_docker_image
      - approve_destroy:
          type: approval
          requires:
            - dast_deployment
      - destroy_dast_deployment:
          requires:
            - approve_destroy
      - approve_prod_deployment:
          type: approval
          requires:
            - destroy_dast_deployment
          filters:
            branches:
              only: 
                - main
      - deploy_to_ecs:
          requires:
            - approve_prod_deployment

# ---------------------------------------------------------------------------- #
#                                     JOBS                                     #
# ---------------------------------------------------------------------------- #
jobs:
  sast_scan:
    docker:
      - image: cimg/base:current 
    resource_class: medium
    steps:
      - checkout
      - snyk/scan:  #Save the Test Results
          fail-on-issues: false 
          monitor-on-build: false 
          no-cache: true 
          severity-threshold: high 
  build_scan_push_db_docker_image:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    steps:
      - checkout
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup
          repo: $AWS_ECR_REPO 
          push_image: false  
          dockerfile: Dockerfile.db
          extra_build_args: '--build-arg MYSQL_DATABASE=$MYSQL_DATABASE --build-arg MYSQL_USER=$MYSQL_USER --build-arg MYSQL_PASSWORD=$MYSQL_PASSWORD'
          tag: $AWS_ECR_REPO-db-v<<pipeline.number>>
      - snyk/scan: #save test files
          docker-image-name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-db-v-<< pipeline.number >>
          fail-on-issues: false
          monitor-on-build: false 
          no-cache: true 
          severity-threshold: high
      - aws-ecr/push_image:
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-db-v<< pipeline.number >>
  build_scan_push_app_docker_image:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    steps:
      - checkout
      - run:
          name: echo "Creating the .env file"
          command: |
            echo "MYSQL_HOST=$MYSQL_HOST" >> .env
            echo "MYSQL_DATABASE=$MYSQL_DATABASE" >> .env
            echo "MYSQL_USER=$MYSQL_USER" >> .env
            echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .env
      - aws-ecr/build_and_push_image:
          auth:
            - aws-cli/setup
          repo: $AWS_ECR_REPO 
          push_image: false  
          dockerfile: Dockerfile.app
          tag: $AWS_ECR_REPO-app-v<<pipeline.number>>
      - snyk/scan: #save test files
          docker-image-name: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-app-v-<< pipeline.number >>
          fail-on-issues: false
          monitor-on-build: false 
          no-cache: true 
          severity-threshold: high
      - aws-ecr/push_image:
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-app-v<< pipeline.number >>
  dast_deployment:
    docker:
      - image: cimg/base:current
    resource_class: medium
    #working_directory: /mnt/ramdisk
    steps:
      - checkout
      - terraform/install:
          os: linux
          arch: amd64
      - terraform/init:
          path: ./terraform/ecs
      - terraform/plan:
          var: app-name=$APP_NAME, environment=$ENVIRONMENT, aws-region=$AWS_DEFAULT_REGION, aws-access-key=$AWS_ACCESS_KEY_ID, aws-secret-key=$AWS_SECRET_ACCESS_KEY, db-ecr-url=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-db-v-<< pipeline.number >>, app-ecr-url=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-app-v-<< pipeline.number >>
          workspace: $ENVIRONMENT 
          path: ./terraform/ecs
      - terraform/apply:
          var: app-name=$APP_NAME, environment=$ENVIRONMENT, aws-region=$AWS_DEFAULT_REGION, aws-access-key=$AWS_ACCESS_KEY_ID, aws-secret-key=$AWS_SECRET_ACCESS_KEY, db-ecr-url=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-db-v-<< pipeline.number >>, app-ecr-url=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-app-v-<< pipeline.number >>
          workspace: $ENVIRONMENT 
          path: ./terraform/ecs
  dast_testing: 
    docker:
      - image: owasp/zap2docker-stable
    resource_class: medium
    steps:
      - checkout
      - run:
          command: |
            mkdir /zap/wrk
            zap-full-scan.py -t http://$(cat ./terraform/ecs/target-url | tr -d '"') -r report.html || true
      - store_artifacts:
          path: /zap/wrk
          destination: OWASP-Zap-report
  destroy_dast_deployment:
    docker:
      - image: cimg/base:current
    resource_class: medium
    steps:
      - checkout
      - terraform/install:
          os: linux
          arch: amd64
      - terraform/init:
          path: ./terraform/ecs
      - terraform/destroy:
          var: app-name=$APP_NAME, environment=$ENVIRONMENT, aws-region=$AWS_DEFAULT_REGION, aws-access-key=$AWS_ACCESS_KEY_ID, aws-secret-key=$AWS_SECRET_ACCESS_KEY, db-ecr-url=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-db-v-<< pipeline.number >>, app-ecr-url=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-app-v-<< pipeline.number >>
          workspace: $ENVIRONMENT
          path: ./terraform/ecs
  deploy_to_ecs:
    docker:
      - image: cimg/base:current
    resource_class: medium
    steps:
      - aws-cli/setup
      - aws-ecs/update_service:
          cluster: "${APP_NAME}-prod-cluster"
          family: "${APP_NAME}-prod-db"
          service_name: "db"
          force_new_deployment: true 
          container_image_name_updates:  "container=db,image-and-tag=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-db-v<< pipeline.number >>"
      - aws-ecs/update_service:
          cluster: "${APP_NAME}-prod-cluster"
          family: "${APP_NAME}-prod-app"
          service_name: "app"
          force_new_deployment: true 
          container_image_name_updates: "container=app,image-and-tag=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$AWS_ECR_REPO:$AWS_ECR_REPO-app-v<< pipeline.number >>"
