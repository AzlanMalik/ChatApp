version: 2.1
# orbs
orbs:
  aws-cli: circleci/aws-cli@4.1.3
  aws-ecr: circleci/aws-ecr@9.0.2
  snyk: snyk/snyk@2.0.3
  stackhawk: stackhawk/stackhawk@1.0.5
  terraform: circleci/terraform@3.2.1

# Define the jobs we want to run for this project
jobs:
  scan_app:
    docker:
      - image: cimg/php:8.3.3 # change this container image
    steps:
      - checkout
      - snyk/scan:
          fail-on-issues: false
          monitor-on-build: false
  build_scan_push_database_docker_image:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    steps:
      - aws-ecr/build_and_push_image:
          account_id: $ACCOUNT_ID
          attach_workspace: true
          auth:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_ARN
          dockerfile: Dockerfile.db
          push_image: false
          region: $AWS_REGION
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-db-v<< pipeline.number >>
      - snyk/scan:
          docker-image-name: $ACCOUNT_URL.dkr.ecr.$AWS_REGION.amazonaws.com/$AWS_ECR_REPO:chatapp-db-v2
          fail-on-issues: false
          monitor-on-build: false #save test files
          severity-threshold: high
      - aws-ecr/push_image:
          account_id: $ACCOUNT_ID
          region: $AWS_REGION
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-db-v<< pipeline.number >>
  build_scan_push_application_docker_image:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    steps:
      - checkout
      - run:
          name: echo "created the environment file"
          command: touch .env
      - run:
          name: echo "adding environment variables in .env"
          command: |
            echo "MYSQL_HOST=$MYSQL_HOST" >> .env
            echo "MYSQL_DATABASE=$MYSQL_DATABASE" >> .env
            echo "MYSQL_USER=$MYSQL_USER" >> .env
            echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .env
      - aws-ecr/build_and_push_image:
          checkout: false
          account_id: $ACCOUNT_ID
          attach_workspace: true
          auth:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_ARN
          dockerfile: Dockerfile.app
          push_image: false
          region: $AWS_REGION
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-app-v<< pipeline.number >>
      - snyk/scan:
          docker-image-name: $ACCOUNT_URL.dkr.ecr.$AWS_REGION.amazonaws.com/$AWS_ECR_REPO:chatapp-app-v1
          fail-on-issues: false
          monitor-on-build: false #save test files
          severity-threshold: high
      - aws-ecr/push_image:
          account_id: $ACCOUNT_ID
          region: $AWS_REGION
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-app-v<< pipeline.number >>

# Orchestrate our job run sequence
workflows:
  testing-config:
    jobs:
      - scan_app
      - build_scan_push_database_docker_image:
          requires:
            - scan_app
      - build_scan_push_application_docker_image:
          requires:
            - build_scan_push_database_docker_image
