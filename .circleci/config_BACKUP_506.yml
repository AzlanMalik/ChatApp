version: 2.1

# ---------------------------------------------------------------------------- #
#                                     ORBS                                     #
# ---------------------------------------------------------------------------- #
orbs:
  aws-cli: circleci/aws-cli@4.1.3
  aws-ecr: circleci/aws-ecr@9.0.2
  snyk: snyk/snyk@2.0.3
  terraform: circleci/terraform@3.2.1

# ---------------------------------------------------------------------------- #
#                                   WORKFLOW                                   #
# ---------------------------------------------------------------------------- #
workflows:
  testing-config:
    jobs:
      # - scan_app
      # - build_scan_push_database_docker_image:
      #     requires:
      #       - scan_app
      # - build_scan_push_application_docker_image:
      #     requires:
      #       - build_scan_push_database_docker_image
      - dast_deployment
        # requires:
        #   - build_scan_push_application_docker_image
      - dast_testing:
          requires:
            - dast_deployment
      # - approve_destroy:
      #     type: approval
      #     requires:
      #       - dast_testing
      - destroy_dast_deployment:
          requires:
            - dast_testing
          # requires:
          #   - approve_destroy
      - approve_prod_deployment:
          type: approval
          requires:
            - destroy_dast_deployment
      - deploy_to_ecs:
          # filters:
          #   - branches:
          #       only: main
          requires:
            - approve_prod_deployment

# ---------------------------------------------------------------------------- #
#                                     JOBS                                     #
# ---------------------------------------------------------------------------- #
jobs:
  scan_app:
    docker:
      - image: cimg/php:8.3.3 # change this container image
    resource_class: small
    steps:
      - checkout
      - snyk/scan:
          fail-on-issues: false
          monitor-on-build: false
  build_scan_push_database_docker_image:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    steps:
      - aws-ecr/build_and_push_image:
          account_id: $ACCOUNT_ID
          attach_workspace: true
          auth:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_ARN
          dockerfile: Dockerfile.db
          push_image: false
          region: $AWS_REGION
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-db-v<< pipeline.number >>
      - snyk/scan:
          docker-image-name: $ACCOUNT_URL.dkr.ecr.$AWS_REGION.amazonaws.com/$AWS_ECR_REPO:chatapp-db-v2
          fail-on-issues: false
          monitor-on-build: false #save test files
          severity-threshold: high
      - aws-ecr/push_image:
          account_id: $ACCOUNT_ID
          region: $AWS_REGION
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-db-v<< pipeline.number >>
  build_scan_push_application_docker_image:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    steps:
      - checkout
      - run:
          name: echo "created the environment file"
          command: touch .env
      - run:
          name: echo "adding environment variables in .env"
          command: |
            echo "MYSQL_HOST=$MYSQL_HOST" >> .env
            echo "MYSQL_DATABASE=$MYSQL_DATABASE" >> .env
            echo "MYSQL_USER=$MYSQL_USER" >> .env
            echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .env
      - aws-ecr/build_and_push_image:
          checkout: false
          account_id: $ACCOUNT_ID
          attach_workspace: true
          auth:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_ARN
          dockerfile: Dockerfile.app
          push_image: false
          region: $AWS_REGION
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-app-v<< pipeline.number >>
      - snyk/scan:
          docker-image-name: $ACCOUNT_URL.dkr.ecr.$AWS_REGION.amazonaws.com/$AWS_ECR_REPO:chatapp-app-v1
          fail-on-issues: false
          monitor-on-build: false #save test files
          severity-threshold: high
      - aws-ecr/push_image:
          account_id: $ACCOUNT_ID
          region: $AWS_REGION
          repo: $AWS_ECR_REPO
          tag: $AWS_ECR_REPO-app-v<< pipeline.number >>
  dast_deployment:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - terraform/install:
          os: linux
          arch: amd64
      - terraform/init:
          path: ./terraform/ecs
      - terraform/plan:
          path: ./terraform/ecs
      - terraform/apply:
          path: ./terraform/ecs
      - run:
          name: Get Terraform Output
          command: |
            cd ./terraform/ecs
<<<<<<< HEAD
            echo $(terraform output lb_hostname) >> target-url
=======
            echo $(terraform output lb-url) >> target-url
>>>>>>> terraform
      - run: rm -rf ./terraform/ecs/.terraform
      - persist_to_workspace:
          root: ./terraform
          paths:
            - "*"
      - run: sleep 1
  dast_testing: 
    docker:
      - image: owasp/zap2docker-stable
    resource_class: small
    steps:
      - attach_workspace:
          at: terraform
      - run:
          command: |
            mkdir /zap/wrk
<<<<<<< HEAD
            zap-full-scan.py -t http://$(cat ./terraform/ecs/target-url | tr -d '"') -r report.html || true
=======
            echo "http://$(cat ./terraform/ecs/target-url)"
            zap-full-scan.py -t http://$(cat ./terraform/ecs/target-url | tr -d '"') -x report.html || true
      - store_test_results:
          path: /zap/wrk
>>>>>>> terraform
      - store_artifacts:
          path: /zap/wrk
          destination: zap-report
  destroy_dast_deployment:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - attach_workspace:
          at: terraform
      - terraform/install:
          os: linux
          arch: amd64
      - run: ls
      - terraform/init:
          path: ./terraform/ecs
      - terraform/destroy:
          path: ./terraform/ecs
  deploy_to_ecs: # pending
    docker:
<<<<<<< HEAD
      - image: alpine:latest
=======
      - image: owasp/zap2docker-bare
>>>>>>> terraform
    resource_class: small
    steps:
      - run: echo "deployed to ecs  "
# aws s3api delete-bucket --bucket my-circleci-test-bucket-12548624 --region me-central-1
